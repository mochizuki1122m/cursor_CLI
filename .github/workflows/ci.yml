name: CI-Gates
on:
  pull_request:
    branches: [ main ]
jobs:
  lint-test-security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install Node deps
        run: npm ci || npm install
      - name: Install Python deps
        run: pip install -r requirements.txt
      - name: ESLint
        run: npx eslint .
      - name: PyTest (tolerate no tests)
        run: |
          set +e
          pytest -q --maxfail=1 --disable-warnings
          code=$?
          if [ $code -eq 5 ]; then
            echo "No tests collected; treating as pass"
            exit 0
          fi
          exit $code
      - name: Build Scorecard
        run: |
          node scripts/analyze_patch_ir.mjs || true
          node scripts/make_scorecard.mjs || true
          if [ -f review/reports/scorecard.json ]; then
            cat review/reports/scorecard.json
          else
            echo '{"note":"scorecard absent; skipping enforcement"}'
          fi
      - name: Enforce Thresholds (skip if absent)
        run: |
          if [ ! -f review/reports/scorecard.json ]; then
            echo "scorecard.json missing; skipping enforcement"; exit 0;
          fi
          node -e "const fs=require('fs');const s=JSON.parse(fs.readFileSync('review/reports/scorecard.json','utf8'));if(!s.build_ok||!s.tests_ok||!s.diff_loc_leq||!s.changed_files_leq){console.error('Scorecard gate failed');process.exit(1)}"
      - name: Semgrep (SAST)
        uses: returntocorp/semgrep-action@v1
      - name: gitleaks (Secrets)
        uses: gitleaks/gitleaks-action@v2
      - name: SBOM / CycloneDX
        run: npx @cyclonedx/cyclonedx-npm --output-file sbom.json
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
      - name: Cosign sign SBOM (optional)
        if: ${{ secrets.COSIGN_PRIVATE_KEY != '' }}
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "$COSIGN_PRIVATE_KEY" | base64 -d > cosign.key
          cosign sign-blob --yes --key cosign.key sbom.json
          rm -f cosign.key
      - name: CodeQL Init
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript,python'
      - name: CodeQL Analyze
        uses: github/codeql-action/analyze@v3
